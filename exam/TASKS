Экзаменационные задачи по курсу
“Язык программирования Python”

Персональные задачи
Для тех, кто боится или не уверен в своих силах в командной разработке будут персонально
выданы задачи на знание базового синтаксиса и ООП.

Командные задачи
Условия:
• Команда 2-4 человека.
• В самом начале решения необходимо провести анализ и выписать план разработки на
листочке. Листочек положить рядом с местом дислокации команды.
• За час до окончания экзамена должны продемонстрировать свое решение для
критики/уточнений.
• Во время решения задачи можно пользоваться всеми доступными источниками
информации.
• Автор кода должен указывать в комментарии, что код разработан именно им.
• Конечное решение должно быть выложено на сетевой ресурс для проверки
преподавателем.

Задача 1. Стастистика связей человека в соц. сети linkedin
Разобраться в программном REST-интерфейсе социальной сети и реализовать программу,
которая:
• выводит статистику по первому кругу заданного пользователя: число людей, набор
скилов этих людей;
• выводит статистику по второму кругу пользователя: сколько людей, и набор (сет) их
скилов (навыков, https://developer.linkedin.com/documents/profile-fields#skills);
• строит статистику по частоте встречаемых навыков, например:
  ◦ python - 40 человек;
  ◦ java - 30 человек;
  ◦ plsql - 20 человек;
  ◦ и т. д.
Для решения задачи понадобится:
• Документация для разработчиков:
https://developer.linkedin.com/documents/quick-start-guide
• Питон-библиотека: http://code.google.com/p/python-linkedin/

Задача 2. Анализ участия человека в open source разработке на сервисе github
Разобраться в программном интерфейсе соц. сервиса Github и реализовать программу, которая:
• выводит количество коммитов заданного пользователя;
• выводит объем кода, написанного пользователем;
• выводит общее количество всех людей, занятых в тех же проектах.
Для решения задачи нужно выбрать одну из питон-библиотек и использовать её:
http://developer.github.com/v3/libraries/

Задача 3. Стастистика связей человека в соц. сети moikrug
Условия задачи такие же как и в #1, только нет библиотеки для работы с сервисом.
Документация:
http://api.yandex.ru/moikrug/doc/dg/concepts/About.xml
http://api.yandex.ru/moikrug/doc/dg/concepts/operations.xml


Персональные задачи
Контрольная работа по практической части курса 
«Язык программирования Python»

Обязательно приводить комментарии ко всем программам и несколько примеров их
работоспособности. Все решения (кроме ООП) должны приводиться в виде функций.
Запрещается использовать циклы while и оператор сравнения <>.
Рекомендуется при решении задачи можно пользоваться стандартными библиотеками,
например: sys, os, string, glob и т. д, а также искать ответы на английские запросы в
англоязычном (.com) поисковике Google.
Задачи
Базовый синтаксис:
1. Реализовать алгоритм поиска второго максимального элемента во входном списке.
2. Реализовать алгоритм поиска второго минимального элемента во входном списке.
3. Реализовать алгоритм поиска k-ого максимума во входном списке.
4. Реализовать алгоритм поиска k-ого минимума во входном списке.
5. Написать функцию составляющую статистику по данному на вход тексту (какие
буквы сколько встречаются, количество знаков препинания, количество слов,
количество предложений)
6. Написать функцию, которая выводит текстовую статистику (частота встречаемости
символов) для каждой строки входного файла.
7. Написать функцию, которая производит шифровку/дешифровку текста по
алгоритму Цезаря. (При шифровании каждый символ заменяется другим,
отстоящим от него в алфавите на фиксированное число позиций.) Ключ
шифрования выбирать самим.
8. Написать функцию находящую в заданной папке все файлы с расширением «.mp3».
9. Написать функцию выводящую статистику по количеству файлов и папок в
указанном месте файловой системы.
10. Написать программу переставляющую слова в предложении в обратном порядке.
Во входном тексте может быть несколько предложений.
Объектно-ориентированное программирование:
1. Реализовать объект call-центр. Call-центр содержит операторов центра, которые
могут принимать звонки / заканчивать звонки. Также присутствует объект
автоматизатор, который в зависимости от занятости операторов назначает задачи и
ставит их в очередь на исполнение. Длительность разговора оператора с любым
клиентом носит случайный характер.
2. Придумать реализацию системы классов для персонажа «Бойкий Зайцелоп».
(Не меньше трех.) Продемонстрировать явление полиморфизма.
3. Придумать алгоритм и запрограммировать класс, экземпляр которого будет
реализовывать поведение объекта «очередь» с помощью двух объектов типа
«стек». Объект должен иметь, как минимум два метода: .push(a), .get().
4. Придумать алгоритм и запрограммировать класс, экземпляр которого будет
реализовывать поведение объекта «стек» с помощью двух объектов типа
«очередь». Объект должен иметь, как минимум два метода: .push(a), .pop()